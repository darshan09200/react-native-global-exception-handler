"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[13],{7309:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"troubleshooting","title":"Troubleshooting","description":"Common issues and solutions when working with react-native-global-exception-handler.","source":"@site/docs/troubleshooting.md","sourceDirName":".","slug":"/troubleshooting","permalink":"/react-native-global-exception-handler/docs/troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/darshan09200/react-native-global-exception-handler/tree/main/website/docs/troubleshooting.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"id":"troubleshooting","sidebar_position":12,"title":"Troubleshooting"},"sidebar":"docSidebar","previous":{"title":"API Reference","permalink":"/react-native-global-exception-handler/docs/api"}}');var i=r(4848),l=r(8453);const o={id:"troubleshooting",sidebar_position:12,title:"Troubleshooting"},t=void 0,a={},d=[{value:"Installation Issues",id:"installation-issues",level:2},{value:"TurboModule Not Found",id:"turbomodule-not-found",level:3},{value:"iOS Pod Installation Fails",id:"ios-pod-installation-fails",level:3},{value:"Android Build Fails",id:"android-build-fails",level:3},{value:"Runtime Issues",id:"runtime-issues",level:2},{value:"Handler Not Called in Development",id:"handler-not-called-in-development",level:3},{value:"Native Handler Not Working on Android (Debug)",id:"native-handler-not-working-on-android-debug",level:3},{value:"App Doesn&#39;t Restart After Crash",id:"app-doesnt-restart-after-crash",level:3},{value:"Errors Not Reaching Analytics Service",id:"errors-not-reaching-analytics-service",level:3},{value:"Testing Issues",id:"testing-issues",level:2},{value:"<code>simulateNativeCrash</code> Doesn&#39;t Work",id:"simulatenativecrash-doesnt-work",level:3},{value:"Test Crashes Affect Production",id:"test-crashes-affect-production",level:3},{value:"Performance Issues",id:"performance-issues",level:2},{value:"App Sluggish After Setting Handler",id:"app-sluggish-after-setting-handler",level:3},{value:"Memory Leaks from Error Handlers",id:"memory-leaks-from-error-handlers",level:3},{value:"Type Issues (TypeScript)",id:"type-issues-typescript",level:2},{value:"Type Errors with Handler Functions",id:"type-errors-with-handler-functions",level:3},{value:"Options Type Not Recognized",id:"options-type-not-recognized",level:3},{value:"Compatibility Issues",id:"compatibility-issues",level:2},{value:"React Native Version Mismatch",id:"react-native-version-mismatch",level:3},{value:"Hermes Not Enabled",id:"hermes-not-enabled",level:3},{value:"Getting More Help",id:"getting-more-help",level:2},{value:"Debug Mode",id:"debug-mode",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Common issues and solutions when working with ",(0,i.jsx)(n.code,{children:"react-native-global-exception-handler"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"installation-issues",children:"Installation Issues"}),"\n",(0,i.jsx)(n.h3,{id:"turbomodule-not-found",children:"TurboModule Not Found"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"TurboModuleRegistry.getEnforcing called for module 'GlobalExceptionHandler' but it is not registered\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Ensure you're using React Native 0.68 or higher"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Clear metro cache:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx react-native start --reset-cache\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Clean and rebuild:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# iOS\ncd ios && rm -rf Pods && pod install && cd ..\nnpx react-native run-ios\n\n# Android\ncd android && ./gradlew clean && cd ..\nnpx react-native run-android\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ios-pod-installation-fails",children:"iOS Pod Installation Fails"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'[!] CocoaPods could not find compatible versions for pod "GlobalExceptionHandler"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Update CocoaPods:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo gem install cocoapods\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Clean and reinstall:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd ios\nrm -rf Pods Podfile.lock\npod deintegrate\npod install\ncd ..\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"android-build-fails",children:"Android Build Fails"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Could not determine the dependencies of task ':app:compileDebugJavaWithJavac'\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Ensure your ",(0,i.jsx)(n.code,{children:"android/build.gradle"})," has correct Kotlin version:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:'buildscript {\n    ext {\n        kotlinVersion = "1.8.0"\n    }\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Clean gradle cache:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd android\n./gradlew clean\n./gradlew cleanBuildCache\ncd ..\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"runtime-issues",children:"Runtime Issues"}),"\n",(0,i.jsx)(n.h3,{id:"handler-not-called-in-development",children:"Handler Not Called in Development"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue:"})," Exception handler doesn't trigger in development mode."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsx)(n.p,{children:"For JavaScript exceptions, enable dev mode:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"setJSExceptionHandler((error, isFatal) => {\n  // Your handler\n}, true); // \u2190 Set to true to enable in dev mode\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," Android native handlers may not work as expected in debug mode due to the way debug builds handle uncaught exceptions."]}),"\n",(0,i.jsx)(n.h3,{id:"native-handler-not-working-on-android-debug",children:"Native Handler Not Working on Android (Debug)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue:"})," Native exception handler doesn't trigger in Android debug builds."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,i.jsx)(n.p,{children:"In debug mode, React Native's debug infrastructure may interfere with native exception handling. This is expected behavior."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsx)(n.p,{children:"Test native exception handling in release builds:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx react-native run-android --variant=release\n"})}),"\n",(0,i.jsx)(n.h3,{id:"app-doesnt-restart-after-crash",children:"App Doesn't Restart After Crash"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue:"})," App shows error but doesn't provide restart functionality."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsxs)(n.p,{children:["For Android, ensure ",(0,i.jsx)(n.code,{children:"forceAppToQuit"})," is configured:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"setNativeExceptionHandler((errorString) => {\n  // Handle error\n}, {\n  forceAppToQuit: true  // Required for proper cleanup\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"For iOS, you must use a custom error screen as iOS doesn't allow programmatic restart."}),"\n",(0,i.jsx)(n.h3,{id:"errors-not-reaching-analytics-service",children:"Errors Not Reaching Analytics Service"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue:"})," Errors are captured but not sent to your analytics service."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Check network connectivity in error handler"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Queue errors locally for retry:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst queueError = async (error) => {\n  const queue = await AsyncStorage.getItem('error_queue');\n  const errors = queue ? JSON.parse(queue) : [];\n  errors.push(error);\n  await AsyncStorage.setItem('error_queue', JSON.stringify(errors));\n};\n\nsetJSExceptionHandler((error, isFatal) => {\n  queueError({ error, isFatal });\n}, true);\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"testing-issues",children:"Testing Issues"}),"\n",(0,i.jsxs)(n.h3,{id:"simulatenativecrash-doesnt-work",children:[(0,i.jsx)(n.code,{children:"simulateNativeCrash"})," Doesn't Work"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue:"})," Calling ",(0,i.jsx)(n.code,{children:"simulateNativeCrash"})," has no effect."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Ensure you're running on a real device or simulator (not web)"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Check platform:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { Platform } from 'react-native';\n\nif (Platform.OS === 'ios' || Platform.OS === 'android') {\n  simulateNativeCrash('nsexception');\n} else {\n  console.log('Not supported on this platform');\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Verify the crash type is valid for your platform"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test-crashes-affect-production",children:"Test Crashes Affect Production"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue:"})," Accidentally left crash simulation code in production build."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"__DEV__"})," flag to prevent test code in production:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { simulateNativeCrash } from 'react-native-global-exception-handler';\n\nif (__DEV__) {\n  // Only available in dev builds\n  global.simulateCrash = () => {\n    simulateNativeCrash('nsexception');\n  };\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,i.jsx)(n.h3,{id:"app-sluggish-after-setting-handler",children:"App Sluggish After Setting Handler"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue:"})," App performance degrades after setting exception handlers."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsx)(n.p,{children:"Keep handlers lightweight:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// \u274c Bad - Heavy synchronous operation\nsetJSExceptionHandler((error, isFatal) => {\n  // Expensive operation\n  const largeData = processHugeDataset();\n  sendToServer(largeData);\n}, true);\n\n// \u2705 Good - Async operation\nsetJSExceptionHandler((error, isFatal) => {\n  // Queue for later processing\n  setTimeout(() => {\n    sendToServer(error);\n  }, 0);\n}, true);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"memory-leaks-from-error-handlers",children:"Memory Leaks from Error Handlers"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue:"})," Memory usage increases over time."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsx)(n.p,{children:"Avoid storing references in closures:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// \u274c Bad - Closure captures large data\nlet largeData = /* ... */;\nsetJSExceptionHandler((error, isFatal) => {\n  console.log(largeData); // Keeps largeData in memory\n}, true);\n\n// \u2705 Good - No closure captures\nsetJSExceptionHandler((error, isFatal) => {\n  // Get fresh data when needed\n  const data = getCurrentData();\n  console.log(data);\n}, true);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"type-issues-typescript",children:"Type Issues (TypeScript)"}),"\n",(0,i.jsx)(n.h3,{id:"type-errors-with-handler-functions",children:"Type Errors with Handler Functions"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"Type '(error: Error, isFatal: boolean) => void' is not assignable to type 'JSExceptionHandler'\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsx)(n.p,{children:"Import types from the library:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { \n  setJSExceptionHandler, \n  type JSExceptionHandler \n} from 'react-native-global-exception-handler';\n\nconst handler: JSExceptionHandler = (error, isFatal) => {\n  console.log(error);\n};\n\nsetJSExceptionHandler(handler, true);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"options-type-not-recognized",children:"Options Type Not Recognized"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"Property 'forceAppToQuit' does not exist on type '{}'\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsxs)(n.p,{children:["Import ",(0,i.jsx)(n.code,{children:"ExceptionHandlerOptions"})," type:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"import { \n  setNativeExceptionHandler,\n  type ExceptionHandlerOptions \n} from 'react-native-global-exception-handler';\n\nconst options: ExceptionHandlerOptions = {\n  forceAppToQuit: true,\n  callPreviouslyDefinedHandler: false\n};\n\nsetNativeExceptionHandler((error) => {\n  console.log(error);\n}, options);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"compatibility-issues",children:"Compatibility Issues"}),"\n",(0,i.jsx)(n.h3,{id:"react-native-version-mismatch",children:"React Native Version Mismatch"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"The package react-native-global-exception-handler requires React Native 0.68+\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsx)(n.p,{children:"This library requires React Native 0.68 or higher. If you're using an older version:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Upgrade React Native:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npx react-native upgrade\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Or use the original library for older versions:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install react-native-exception-handler\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"hermes-not-enabled",children:"Hermes Not Enabled"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Issue:"})," Some features don't work without Hermes engine."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,i.jsx)(n.p,{children:"Enable Hermes in your app:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"iOS"})," (",(0,i.jsx)(n.code,{children:"ios/Podfile"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ruby",children:"use_react_native!(\n  :path => config[:reactNativePath],\n  :hermes_enabled => true\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Android"})," (",(0,i.jsx)(n.code,{children:"android/app/build.gradle"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:"project.ext.react = [\n    enableHermes: true\n]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"getting-more-help",children:"Getting More Help"}),"\n",(0,i.jsx)(n.p,{children:"If you're still experiencing issues:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Check existing issues"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/darshan09200/react-native-global-exception-handler/issues",children:"GitHub Issues"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Create a new issue"}),": Include:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"React Native version"}),"\n",(0,i.jsx)(n.li,{children:"Platform (iOS/Android)"}),"\n",(0,i.jsx)(n.li,{children:"Error message"}),"\n",(0,i.jsx)(n.li,{children:"Minimal reproduction code"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Enable verbose logging"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"setJSExceptionHandler((error, isFatal) => {\n  console.log('Error details:', {\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    isFatal\n  });\n}, true);\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,i.jsx)(n.p,{children:"Enable detailed logging for troubleshooting:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Add to your index.js\nif (__DEV__) {\n  console.log('Global Exception Handler - Debug Mode');\n  \n  setJSExceptionHandler((error, isFatal) => {\n    console.log('=== JS Exception Caught ===');\n    console.log('Fatal:', isFatal);\n    console.log('Error:', error);\n    console.log('Stack:', error.stack);\n    console.log('==========================');\n  }, true);\n  \n  setNativeExceptionHandler((errorString) => {\n    console.log('=== Native Exception Caught ===');\n    console.log('Error:', errorString);\n    console.log('===============================');\n  });\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>t});var s=r(6540);const i={},l=s.createContext(i);function o(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);