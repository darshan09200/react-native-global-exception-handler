"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[474],{8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var i=r(6540);const t={},a=i.createContext(t);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(a.Provider,{value:n},e.children)}},8677:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"usage/usage","title":"Usage","description":"Understanding Error Types","source":"@site/docs/usage/usage.md","sourceDirName":"usage","slug":"/usage/","permalink":"/react-native-global-exception-handler/docs/usage/","draft":false,"unlisted":false,"editUrl":"https://github.com/darshan09200/react-native-global-exception-handler/tree/main/website/docs/usage/usage.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"usage","sidebar_position":3,"title":"Usage"},"sidebar":"docSidebar","previous":{"title":"Installation","permalink":"/react-native-global-exception-handler/docs/overview/installation"},"next":{"title":"Native Crash Handling","permalink":"/react-native-global-exception-handler/docs/usage/native-crash-handling"}}');var t=r(4848),a=r(8453);const o={id:"usage",sidebar_position:3,title:"Usage"},l=void 0,s={},d=[{value:"Understanding Error Types",id:"understanding-error-types",level:2},{value:"JavaScript Exceptions",id:"javascript-exceptions",level:3},{value:"Native Exceptions",id:"native-exceptions",level:3},{value:"JavaScript Exception Handling",id:"javascript-exception-handling",level:2},{value:"Native Exception Handling",id:"native-exception-handling",level:2},{value:"Complete Setup Example",id:"complete-setup-example",level:2},{value:"Development vs Production",id:"development-vs-production",level:2},{value:"Getting the Current Handler",id:"getting-the-current-handler",level:2},{value:"Migration Guide",id:"migration-guide",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"understanding-error-types",children:"Understanding Error Types"}),"\n",(0,t.jsx)(n.p,{children:"Before diving into usage, it's important to understand the two types of errors in a React Native app:"}),"\n",(0,t.jsx)(n.h3,{id:"javascript-exceptions",children:"JavaScript Exceptions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Errors produced by your JavaScript/React code"}),"\n",(0,t.jsx)(n.li,{children:"Can show UI dialogs, alerts, and perform async operations"}),"\n",(0,t.jsx)(n.li,{children:"Can capture and handle gracefully before app crashes"}),"\n",(0,t.jsx)(n.li,{children:"Examples: undefined variables, network errors, logic errors"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"native-exceptions",children:"Native Exceptions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Errors produced by native modules (iOS/Android)"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cannot"})," show JS alerts or update UI via JS code"]}),"\n",(0,t.jsx)(n.li,{children:"Must use native UI for error screens"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Much more critical"})," - leave app in unstable state"]}),"\n",(0,t.jsx)(n.li,{children:"Examples: null pointer exceptions, memory access violations"}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important"}),": Native exceptions are handled via native code. You cannot show React components or JS alerts when a native crash occurs. The handler runs just before the app terminates."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"javascript-exception-handling",children:"JavaScript Exception Handling"}),"\n",(0,t.jsxs)(n.p,{children:["Set up a global handler for JavaScript exceptions in your app's entry point (",(0,t.jsx)(n.code,{children:"index.js"})," or ",(0,t.jsx)(n.code,{children:"App.tsx"}),"):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { setJSExceptionHandler } from 'react-native-global-exception-handler';\n\nsetJSExceptionHandler((error, isFatal) => {\n  // Send to error monitoring service (e.g., Sentry, Bugsnag)\n  console.log('JS Exception:', error.message, 'Fatal:', isFatal);\n  \n  if (isFatal) {\n    // Show crash screen or force restart\n  }\n}, true); // true = enable in dev mode\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["First parameter: Handler function receiving ",(0,t.jsx)(n.code,{children:"(error: Error, isFatal: boolean)"})]}),"\n",(0,t.jsxs)(n.li,{children:["Second parameter: ",(0,t.jsx)(n.code,{children:"allowedInDevMode"})," - Set to ",(0,t.jsx)(n.code,{children:"true"})," to enable in development (default: ",(0,t.jsx)(n.code,{children:"false"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"native-exception-handling",children:"Native Exception Handling"}),"\n",(0,t.jsx)(n.p,{children:"Handle native crashes on iOS and Android:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { setNativeExceptionHandler } from 'react-native-global-exception-handler';\n\nsetNativeExceptionHandler((errorString) => {\n  // errorString contains the native error message\n  console.log('Native Exception:', errorString);\n  \n  // Send to error monitoring\n}, {\n  forceAppToQuit: true,  // Android: Force app to quit after handling\n  callPreviouslyDefinedHandler: false  // Call previous handler (iOS/Android)\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Options:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"forceAppToQuit"})," (Android only): Force app to quit after handler runs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"callPreviouslyDefinedHandler"}),": Chain with previous native exception handler"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Note: The native exception handler only activates in production (bundled) builds. In development you'll still see the Red Screen."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"complete-setup-example",children:"Complete Setup Example"}),"\n",(0,t.jsxs)(n.p,{children:["In your ",(0,t.jsx)(n.code,{children:"index.js"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { \n  setJSExceptionHandler, \n  setNativeExceptionHandler \n} from 'react-native-global-exception-handler';\n\n// JavaScript exception handler\nsetJSExceptionHandler((error, isFatal) => {\n  // Send to monitoring service\n  console.log('JS Error:', error, isFatal);\n}, true);\n\n// Native exception handler\nsetNativeExceptionHandler((errorString) => {\n  // Send to monitoring service\n  console.log('Native Error:', errorString);\n}, {\n  forceAppToQuit: true,\n  callPreviouslyDefinedHandler: false\n});\n\n"})}),"\n",(0,t.jsx)(n.h2,{id:"development-vs-production",children:"Development vs Production"}),"\n",(0,t.jsx)(n.p,{children:"By default, JS exception handler only works in production builds. Enable in development:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// Only in production (default)\nsetJSExceptionHandler(handler);\n\n// Also in development\nsetJSExceptionHandler(handler, true);\n\n// Or check manually\nconst isDev = __DEV__;\nsetJSExceptionHandler(handler, !isDev); // Only in production\n"})}),"\n",(0,t.jsx)(n.h2,{id:"getting-the-current-handler",children:"Getting the Current Handler"}),"\n",(0,t.jsx)(n.p,{children:"Retrieve the currently set JavaScript exception handler:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { getJSExceptionHandler } from 'react-native-global-exception-handler';\n\nconst currentHandler = getJSExceptionHandler();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,t.jsxs)(n.p,{children:["If you're upgrading from the original ",(0,t.jsx)(n.code,{children:"react-native-exception-handler"}),", see the dedicated ",(0,t.jsx)(n.a,{href:"/react-native-global-exception-handler/docs/migration/",children:"Migration Guide"})," for differences, legacy API notes, and step-by-step update instructions."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);