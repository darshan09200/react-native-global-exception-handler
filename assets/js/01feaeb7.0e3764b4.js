"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[854],{8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var r=i(6540);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}},9967:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"advanced/testing","title":"Testing","description":"Learn how to safely test your error handling setup and simulate crashes in development.","source":"@site/docs/advanced/testing.md","sourceDirName":"advanced","slug":"/advanced/testing","permalink":"/react-native-global-exception-handler/docs/advanced/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/darshan09200/react-native-global-exception-handler/tree/main/website/docs/advanced/testing.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"id":"testing","sidebar_position":13,"title":"Testing"},"sidebar":"docSidebar","previous":{"title":"Customization","permalink":"/react-native-global-exception-handler/docs/advanced/customization"},"next":{"title":"Basic examples","permalink":"/react-native-global-exception-handler/docs/examples/basic-examples"}}');var t=i(4848),s=i(8453);const a={id:"testing",sidebar_position:13,title:"Testing"},o=void 0,l={},c=[{value:"Simulating JavaScript Errors",id:"simulating-javascript-errors",level:2},{value:"Simulating Native Crashes",id:"simulating-native-crashes",level:2},{value:"Platform Support",id:"platform-support",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Development Mode vs Production Mode",id:"development-mode-vs-production-mode",level:2},{value:"Testing Analytics Integration",id:"testing-analytics-integration",level:2},{value:"Example: Verifying Handler Execution",id:"example-verifying-handler-execution",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Learn how to safely test your error handling setup and simulate crashes in development."}),"\n",(0,t.jsx)(n.h2,{id:"simulating-javascript-errors",children:"Simulating JavaScript Errors"}),"\n",(0,t.jsx)(n.p,{children:"To test your JS exception handler, throw an error in your app:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { setJSExceptionHandler } from 'react-native-global-exception-handler';\n\nsetJSExceptionHandler((error, isFatal) => {\n  console.log('JS Exception:', error, isFatal);\n}, true);\n\n// Somewhere in your code\nthrow new Error('Test JS Error');\n"})}),"\n",(0,t.jsx)(n.h2,{id:"simulating-native-crashes",children:"Simulating Native Crashes"}),"\n",(0,t.jsxs)(n.p,{children:["Use the built-in ",(0,t.jsx)(n.a,{href:"../api#simulatenativecrashcrashtype",children:(0,t.jsx)(n.code,{children:"simulateNativeCrash"})})," function to trigger native crashes for testing. ",(0,t.jsx)(n.strong,{children:"Warning:"})," This will crash your app."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { simulateNativeCrash, CrashType } from 'react-native-global-exception-handler';\n\n// Simulate a standard NSException (iOS) or equivalent (Android)\nsimulateNativeCrash(CrashType.nsexception);\n\n// Simulate other crash types\nsimulateNativeCrash(CrashType.array_bounds);\nsimulateNativeCrash(CrashType.memory_access);\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Available Crash Types:"})," See the full list in the ",(0,t.jsx)(n.a,{href:"../api#crashtype",children:"CrashType section of the API Reference"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"platform-support",children:"Platform Support"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Works only on iOS and Android (not web)"}),"\n",(0,t.jsx)(n.li,{children:"Some crash types may only be available on one platform"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Only use crash simulation in development or QA builds"}),"\n",(0,t.jsxs)(n.li,{children:["Guard test code with ",(0,t.jsx)(n.code,{children:"__DEV__"})," to avoid accidental production crashes:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"if (__DEV__) {\n  global.simulateCrash = () => {\n    simulateNativeCrash('nsexception');\n  };\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Remove or disable test crash triggers before releasing your app"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"development-mode-vs-production-mode",children:"Development Mode vs Production Mode"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important:"})," Native exception handlers behave differently in dev vs production:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Development Mode"}),": Native exception handler is ",(0,t.jsx)(n.strong,{children:"NOT active"})," - you'll see the Red Screen"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Production/Bundle Mode"}),": Native exception handler is ",(0,t.jsx)(n.strong,{children:"active"})," - your handler will be called"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"To test native exception handling:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Build a production/release bundle"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# iOS\nnpx react-native run-ios --configuration Release\n\n# Android\nnpx react-native run-android --variant=release\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Or disable dev mode"})," in your code:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// Temporarily force production behavior for testing\nif (__DEV__) {\n  console.log('Testing native handler in dev mode');\n  // Note: Native handler still won't work, need release build\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Why?"})," The Red Screen in development mode is designed to help you debug. Native exception handlers only activate in production builds to avoid interfering with React Native's development tools."]}),"\n",(0,t.jsx)(n.h2,{id:"testing-analytics-integration",children:"Testing Analytics Integration"}),"\n",(0,t.jsx)(n.p,{children:"To verify that errors are sent to your analytics service:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Trigger a JS or native crash"}),"\n",(0,t.jsx)(n.li,{children:"Check your analytics dashboard for the error event"}),"\n",(0,t.jsx)(n.li,{children:"Use local logging or AsyncStorage to confirm handler execution"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"example-verifying-handler-execution",children:"Example: Verifying Handler Execution"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import AsyncStorage from '@react-native-async-storage/async-storage';\n\nsetNativeExceptionHandler(async (errorString) => {\n  // Log locally for verification\n  await AsyncStorage.setItem('lastNativeCrash', JSON.stringify({\n    error: errorString,\n    timestamp: new Date().toISOString()\n  }));\n  \n  // Send to analytics\n  reportToAnalytics(errorString);\n});\n\n// Later, check if handler was called\nAsyncStorage.getItem('lastNativeCrash').then(data => {\n  if (data) {\n    console.log('Last crash:', JSON.parse(data));\n  }\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"../troubleshooting",children:"Troubleshooting"})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);