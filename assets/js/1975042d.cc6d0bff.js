"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[727],{6640:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"examples/advanced-examples","title":"Advanced Examples","description":"Restarting the App After an Error","source":"@site/docs/examples/advanced-examples.md","sourceDirName":"examples","slug":"/examples/advanced-examples","permalink":"/react-native-global-exception-handler/docs/examples/advanced-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/darshan09200/react-native-global-exception-handler/tree/main/website/docs/examples/advanced-examples.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"advanced-examples","sidebar_position":2,"title":"Advanced Examples"},"sidebar":"docSidebar","previous":{"title":"Basic examples","permalink":"/react-native-global-exception-handler/docs/examples/basic-examples"},"next":{"title":"Analytics Integration","permalink":"/react-native-global-exception-handler/docs/examples/analytics-integration"}}');var r=a(4848),s=a(8453);const i={id:"advanced-examples",sidebar_position:2,title:"Advanced Examples"},o=void 0,l={},c=[{value:"Restarting the App After an Error",id:"restarting-the-app-after-an-error",level:2},{value:"Chaining Previous Handlers (Advanced)",id:"chaining-previous-handlers-advanced",level:2},{value:"Using <code>forceAppToQuit: false</code> (Android)",id:"using-forceapptoquit-false-android",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"restarting-the-app-after-an-error",children:"Restarting the App After an Error"}),"\n",(0,r.jsxs)(n.p,{children:["A common pattern is to restart the app after a fatal error to give users a fresh start. Here's how to implement it with a package like ",(0,r.jsx)(n.code,{children:"react-native-restart"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",metastring:"npm2yarn",children:"npm install react-native-restart\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then use it in your error handler:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { Platform, Alert } from 'react-native';\nimport RNRestart from 'react-native-restart';\nimport { setJSExceptionHandler, setNativeExceptionHandler } from 'react-native-global-exception-handler';\n\nsetJSExceptionHandler((error, isFatal) => {\n  if (isFatal) {\n    Alert.alert(\n      'Unexpected error occurred',\n      `\n      Error: ${isFatal ? 'Fatal' : ''} ${error.name} ${error.message}\n        \n      We will need to restart the app.\n      `,\n      [\n        {\n          text: 'Restart',\n          onPress: () => {\n            RNRestart.Restart();\n          },\n        },\n      ]\n    );\n  }\n});\n\nsetNativeExceptionHandler((errorString) => {\n  //You can do something like call an api to report to dev team here\n    ...\n    ...\n   // When you call setNativeExceptionHandler, react-native-global-exception-handler sets a\n   // Native Exception Handler popup which supports restart on error in case of android.\n   // In case of iOS, it is not possible to restart the app programmatically, so we just show an error popup and close the app.\n   // To customize the popup screen take a look at CUSTOMIZATION section.\n}, {\n  forceAppToQuit: true\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"chaining-previous-handlers-advanced",children:"Chaining Previous Handlers (Advanced)"}),"\n",(0,r.jsx)(n.p,{children:"If another library (e.g. analytics SDK) already set a JS handler, you can chain it:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { setJSExceptionHandler, getJSExceptionHandler } from 'react-native-global-exception-handler';\n\nconst previousHandler = getJSExceptionHandler();\n\nsetJSExceptionHandler((error, isFatal) => {\n  // Custom logic\n  console.log('Custom JS handler', error.message);\n  // Call previous if exists\n  if (previousHandler) previousHandler(error, isFatal);\n}, true);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For native exceptions, pass ",(0,r.jsx)(n.code,{children:"callPreviouslyDefinedHandler: true"})," in options to chain automatically."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"setNativeExceptionHandler((errorString) => {\n  console.log('Native error:', errorString);\n}, { callPreviouslyDefinedHandler: true });\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"using-forceapptoquit-false-android",children:["Using ",(0,r.jsx)(n.code,{children:"forceAppToQuit: false"})," (Android)"]}),"\n",(0,r.jsxs)(n.p,{children:["Rarely, you may want the app to attempt recovery after a native crash (e.g. when using certain navigation libraries). Set ",(0,r.jsx)(n.code,{children:"forceAppToQuit: false"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"setNativeExceptionHandler((errorString) => {\n  console.log('Attempting recovery after native crash');\n  // Limited operations; app state may be unstable\n}, { forceAppToQuit: false });\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Recovery isn't guaranteed; most native crashes leave the app in an inconsistent state. Default (",(0,r.jsx)(n.code,{children:"true"}),") is safer."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(6540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);