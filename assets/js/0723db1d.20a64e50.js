"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[900],{8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var r=i(6540);const t={},a=r.createContext(t);function s(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(a.Provider,{value:n},e.children)}},8979:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"usage/native-crash-handling","title":"Native Crash Handling","description":"The library provides native exception handling for iOS and Android to catch crashes that occur in native code.","source":"@site/docs/usage/native-crash-handling.md","sourceDirName":"usage","slug":"/usage/native-crash-handling","permalink":"/react-native-global-exception-handler/docs/usage/native-crash-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/darshan09200/react-native-global-exception-handler/tree/main/website/docs/usage/native-crash-handling.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"native-crash-handling","sidebar_position":4,"title":"Native Crash Handling"},"sidebar":"docSidebar","previous":{"title":"Usage","permalink":"/react-native-global-exception-handler/docs/usage/"},"next":{"title":"Customization","permalink":"/react-native-global-exception-handler/docs/advanced/customization"}}');var t=i(4848),a=i(8453);const s={id:"native-crash-handling",sidebar_position:4,title:"Native Crash Handling"},l=void 0,o={},d=[{value:"How It Works",id:"how-it-works",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Platform-Specific Options",id:"platform-specific-options",level:2},{value:"Android Options",id:"android-options",level:3},{value:"iOS Options",id:"ios-options",level:3},{value:"Platform Limitations",id:"platform-limitations",level:2},{value:"iOS Limitations",id:"ios-limitations",level:3},{value:"Android Capabilities",id:"android-capabilities",level:3},{value:"General Limitations",id:"general-limitations",level:3}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The library provides native exception handling for iOS and Android to catch crashes that occur in native code."}),"\n",(0,t.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsx)(n.p,{children:"The library uses platform-specific native exception handlers:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"iOS"}),": Installs an NSException handler and signal handlers"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Android"}),": Installs an UncaughtExceptionHandler"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"When a native crash occurs, your handler function is called with the error message before the app terminates (or continues based on your options)."}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { setNativeExceptionHandler } from 'react-native-global-exception-handler';\n\nsetNativeExceptionHandler((errorString) => {\n  // errorString contains the native error message/stack\n  console.log('Native crash:', errorString);\n  \n  // Send to error monitoring\n  reportToSentry(errorString);\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"platform-specific-options",children:"Platform-Specific Options"}),"\n",(0,t.jsx)(n.h3,{id:"android-options",children:"Android Options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"setNativeExceptionHandler((errorString) => {\n  // Handle error\n}, {\n  forceAppToQuit: true,  // Force app to terminate after handler runs\n  callPreviouslyDefinedHandler: false  // Call previous handler\n});\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"forceAppToQuit"}),": If ",(0,t.jsx)(n.code,{children:"true"})," (default), forces the app to quit after your handler runs (Android only)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"callPreviouslyDefinedHandler"}),": If ",(0,t.jsx)(n.code,{children:"true"}),", calls any previously defined native handler (default: ",(0,t.jsx)(n.code,{children:"false"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"ios-options",children:"iOS Options"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"setNativeExceptionHandler((errorString) => {\n  // Handle error\n}, {\n  callPreviouslyDefinedHandler: false  // Chain with previous handler\n});\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"callPreviouslyDefinedHandler"}),": If ",(0,t.jsx)(n.code,{children:"true"}),", calls any previously defined native exception handler (default: ",(0,t.jsx)(n.code,{children:"false"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"platform-limitations",children:"Platform Limitations"}),"\n",(0,t.jsx)(n.h3,{id:"ios-limitations",children:"iOS Limitations"}),"\n",(0,t.jsx)(n.p,{children:"iOS has stricter limitations when handling native crashes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cannot Restart Programmatically"}),": Unlike Android, iOS doesn't allow programmatic app restarts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"UI State is Unstable"}),": The app is in an unstable state after a crash. UI may not render properly"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Event Handlers Don't Work"}),": Click handlers and other event listeners won't fire in the error screen"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Must Call ",(0,t.jsx)(n.code,{children:"releaseExceptionHold()"})]}),": You MUST call this to allow the app to crash gracefully. Without it, the app will hang indefinitely"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"iOS Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"import { setNativeExceptionHandler } from 'react-native-global-exception-handler';\n\nsetNativeExceptionHandler((errorString) => {\n  // Log the error\n  console.log('iOS Native Crash:', errorString);\n  \n  // Report to analytics\n});\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["On iOS, ",(0,t.jsx)(n.strong,{children:"DO NOT"})," attempt to show interactive UI (buttons, touchable elements) in your error handler. The app is in an unstable state and touch events will not work."]})}),"\n",(0,t.jsx)(n.h3,{id:"android-capabilities",children:"Android Capabilities"}),"\n",(0,t.jsx)(n.p,{children:"Android is more flexible with native crash handling:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Can restart the app programmatically"}),"\n",(0,t.jsx)(n.li,{children:"UI can be displayed (though still unstable)"}),"\n",(0,t.jsx)(n.li,{children:"Can force app to quit or continue running"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"general-limitations",children:"General Limitations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Not all crashes can be intercepted (e.g., some signal-based crashes)"}),"\n",(0,t.jsx)(n.li,{children:"Handler runs synchronously before crash, so keep it lightweight"}),"\n",(0,t.jsx)(n.li,{children:"Network calls may not complete before app terminates"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);