"use strict";(globalThis.webpackChunkwebsite=globalThis.webpackChunkwebsite||[]).push([[536],{6355:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"advanced/customization","title":"Customization","description":"Learn how to customize the native error screens and behavior on both iOS and Android platforms.","source":"@site/docs/advanced/customization.md","sourceDirName":"advanced","slug":"/advanced/customization","permalink":"/react-native-global-exception-handler/docs/advanced/customization","draft":false,"unlisted":false,"editUrl":"https://github.com/darshan09200/react-native-global-exception-handler/tree/main/website/docs/advanced/customization.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"id":"customization","sidebar_position":10,"title":"Customization"},"sidebar":"docSidebar","previous":{"title":"Native Crash Handling","permalink":"/react-native-global-exception-handler/docs/usage/native-crash-handling"},"next":{"title":"Testing","permalink":"/react-native-global-exception-handler/docs/advanced/testing"}}');var i=t(4848),o=t(8453);const a={id:"customization",sidebar_position:10,title:"Customization"},l=void 0,s={},c=[{value:"Custom Native Error Screen (Android)",id:"custom-native-error-screen-android",level:2},{value:"Method 1: Custom Exception Handler Interface",id:"method-1-custom-exception-handler-interface",level:3},{value:"Method 2: Custom Error Activity",id:"method-2-custom-error-activity",level:3},{value:"Custom Native Error Screen (iOS)",id:"custom-native-error-screen-ios",level:2},{value:"Basic Custom Alert",id:"basic-custom-alert",level:3},{value:"Custom Error View Controller",id:"custom-error-view-controller",level:3},{value:"Platform Considerations",id:"platform-considerations",level:2},{value:"iOS Limitations",id:"ios-limitations",level:3},{value:"Android Capabilities",id:"android-capabilities",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Keep It Simple",id:"keep-it-simple",level:3},{value:"Test Thoroughly",id:"test-thoroughly",level:3},{value:"Provide User Actions",id:"provide-user-actions",level:3},{value:"Example: Branded Error Screen",id:"example-branded-error-screen",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Learn how to customize the native error screens and behavior on both iOS and Android platforms."}),"\n",(0,i.jsx)(n.h2,{id:"custom-native-error-screen-android",children:"Custom Native Error Screen (Android)"}),"\n",(0,i.jsx)(n.p,{children:"Android provides multiple ways to customize the error screen that appears when a native exception occurs."}),"\n",(0,i.jsx)(n.h3,{id:"method-1-custom-exception-handler-interface",children:"Method 1: Custom Exception Handler Interface"}),"\n",(0,i.jsxs)(n.p,{children:["Create a custom handler by implementing the ",(0,i.jsx)(n.code,{children:"NativeExceptionHandlerIfc"})," interface:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'// In your MainApplication.kt\nimport com.globalexceptionhandler.GlobalExceptionHandlerModule\nimport com.globalexceptionhandler.NativeExceptionHandlerIfc\n\nclass MainApplication : Application(), ReactApplication {\n    override fun onCreate() {\n        super.onCreate()\n        \n        // Set custom native exception handler\n        GlobalExceptionHandlerModule.setNativeExceptionHandler(\n            object : NativeExceptionHandlerIfc {\n                override fun handleNativeException(\n                    thread: Thread,\n                    throwable: Throwable,\n                    originalHandler: Thread.UncaughtExceptionHandler?\n                ) {\n                    // Custom handling logic\n                    // - Send to analytics\n                    // - Show custom UI\n                    // - Clean up resources\n                    \n                    // Log the error\n                    Log.e("CustomHandler", "Native exception occurred", throwable)\n                    \n                    // Optionally call original handler\n                    originalHandler?.uncaughtException(thread, throwable)\n                }\n            }\n        )\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"method-2-custom-error-activity",children:"Method 2: Custom Error Activity"}),"\n",(0,i.jsx)(n.p,{children:"Replace the default error screen with your own Activity:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 1:"})," Create your custom error activity:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'// CustomErrorActivity.kt\nimport android.app.Activity\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\n\nclass CustomErrorActivity : Activity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_custom_error)\n        \n        // Get error message from intent\n        val errorMessage = intent.getStringExtra("error")\n        \n        findViewById<TextView>(R.id.errorText).text = errorMessage\n        \n        findViewById<Button>(R.id.restartButton).setOnClickListener {\n            // Restart app logic\n            val intent = packageManager.getLaunchIntentForPackage(packageName)\n            intent?.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n            startActivity(intent)\n            finish()\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 2:"})," Create layout file ",(0,i.jsx)(n.code,{children:"res/layout/activity_custom_error.xml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:orientation="vertical"\n    android:gravity="center"\n    android:padding="24dp">\n    \n    <TextView\n        android:id="@+id/errorText"\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:textSize="16sp"\n        android:layout_marginBottom="24dp"/>\n    \n    <Button\n        android:id="@+id/restartButton"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Restart App"/>\n</LinearLayout>\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 3:"})," Register the custom activity in ",(0,i.jsx)(n.code,{children:"MainApplication.kt"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:"import com.globalexceptionhandler.GlobalExceptionHandlerModule\n\nclass MainApplication : Application(), ReactApplication {\n    override fun onCreate() {\n        super.onCreate()\n        \n        GlobalExceptionHandlerModule.replaceErrorScreenActivityClass(\n            CustomErrorActivity::class.java\n        )\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Step 4:"})," Add activity to ",(0,i.jsx)(n.code,{children:"AndroidManifest.xml"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<activity\n    android:name=".CustomErrorActivity"\n    android:exported="false"\n    android:theme="@style/Theme.AppCompat" />\n'})}),"\n",(0,i.jsx)(n.h2,{id:"custom-native-error-screen-ios",children:"Custom Native Error Screen (iOS)"}),"\n",(0,i.jsxs)(n.p,{children:["For iOS, customize the error handler in your ",(0,i.jsx)(n.code,{children:"AppDelegate.m"})," or ",(0,i.jsx)(n.code,{children:"AppDelegate.mm"}),":"]}),"\n",(0,i.jsx)(n.h3,{id:"basic-custom-alert",children:"Basic Custom Alert"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-objc",children:'#import "GlobalExceptionHandler.h"\n\n- (BOOL)application:(UIApplication *)application \n    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    // Your existing setup...\n    \n    // Custom native exception handler\n    [GlobalExceptionHandler replaceNativeExceptionHandlerBlock:^(\n        NSException *exception, \n        NSString *readeableException\n    ) {\n        // Create custom alert\n        UIAlertController* alert = [UIAlertController\n            alertControllerWithTitle:@"App Error"\n            message:[NSString stringWithFormat:\n                @"An unexpected error occurred.\\n\\n%@", \n                readeableException\n            ]\n            preferredStyle:UIAlertControllerStyleAlert];\n        \n        // Add action\n        UIAlertAction* closeAction = [UIAlertAction\n            actionWithTitle:@"Close App"\n            style:UIAlertActionStyleDestructive\n            handler:^(UIAlertAction * action) {\n                [GlobalExceptionHandler releaseExceptionHold];\n            }];\n        \n        [alert addAction:closeAction];\n        \n        // Present the alert\n        [self.window.rootViewController \n            presentViewController:alert \n            animated:YES \n            completion:nil];\n        \n        // Auto-close after 4 seconds\n        [NSTimer scheduledTimerWithTimeInterval:4.0\n            target:[GlobalExceptionHandler class]\n            selector:@selector(releaseExceptionHold)\n            userInfo:nil\n            repeats:NO];\n    }];\n    \n    return YES;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"custom-error-view-controller",children:"Custom Error View Controller"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-objc",children:'// ErrorViewController.h\n@interface ErrorViewController : UIViewController\n@property (nonatomic, strong) NSString *errorMessage;\n@end\n\n// ErrorViewController.m\n@implementation ErrorViewController\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    self.view.backgroundColor = [UIColor whiteColor];\n    \n    // Add UI elements\n    UILabel *titleLabel = [[UILabel alloc] initWithFrame:\n        CGRectMake(20, 100, self.view.bounds.size.width - 40, 40)];\n    titleLabel.text = @"An Error Occurred";\n    titleLabel.textAlignment = NSTextAlignmentCenter;\n    titleLabel.font = [UIFont boldSystemFontOfSize:24];\n    [self.view addSubview:titleLabel];\n    \n    UILabel *messageLabel = [[UILabel alloc] initWithFrame:\n        CGRectMake(20, 160, self.view.bounds.size.width - 40, 200)];\n    messageLabel.text = self.errorMessage;\n    messageLabel.numberOfLines = 0;\n    messageLabel.textAlignment = NSTextAlignmentCenter;\n    [self.view addSubview:messageLabel];\n    \n    UIButton *closeButton = [UIButton buttonWithType:UIButtonTypeSystem];\n    closeButton.frame = CGRectMake(\n        (self.view.bounds.size.width - 200) / 2, \n        400, \n        200, \n        44\n    );\n    [closeButton setTitle:@"Close App" forState:UIControlStateNormal];\n    [closeButton addTarget:self \n        action:@selector(closeApp) \n        forControlEvents:UIControlEventTouchUpInside];\n    [self.view addSubview:closeButton];\n}\n\n- (void)closeApp {\n    [GlobalExceptionHandler releaseExceptionHold];\n}\n\n@end\n\n// In AppDelegate.m\n[GlobalExceptionHandler replaceNativeExceptionHandlerBlock:^(\n    NSException *exception, \n    NSString *readeableException\n) {\n    ErrorViewController *errorVC = [[ErrorViewController alloc] init];\n    errorVC.errorMessage = readeableException;\n    \n    [self.window.rootViewController \n        presentViewController:errorVC \n        animated:YES \n        completion:nil];\n}];\n'})}),"\n",(0,i.jsx)(n.h2,{id:"platform-considerations",children:"Platform Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"ios-limitations",children:"iOS Limitations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Cannot restart app programmatically after native crash"}),"\n",(0,i.jsx)(n.li,{children:"UI becomes unstable during native exceptions"}),"\n",(0,i.jsxs)(n.li,{children:["Must call ",(0,i.jsx)(n.code,{children:"releaseExceptionHold()"})," to close the app"]}),"\n",(0,i.jsx)(n.li,{children:"Best practice: Show informative message and let user restart"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"android-capabilities",children:"Android Capabilities"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Can restart app after native crash"}),"\n",(0,i.jsx)(n.li,{children:"More stable during native exceptions"}),"\n",(0,i.jsx)(n.li,{children:"Built-in restart functionality available"}),"\n",(0,i.jsx)(n.li,{children:"More customization options"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.h3,{id:"keep-it-simple",children:"Keep It Simple"}),"\n",(0,i.jsx)(n.p,{children:"Error handlers run in an unstable state. Keep your custom UI simple:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Avoid complex animations"}),"\n",(0,i.jsx)(n.li,{children:"Minimize network calls"}),"\n",(0,i.jsx)(n.li,{children:"Use basic UI components"}),"\n",(0,i.jsx)(n.li,{children:"Provide clear messaging"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test-thoroughly",children:"Test Thoroughly"}),"\n",(0,i.jsx)(n.p,{children:"Test your custom error screens with different crash scenarios:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"import { simulateNativeCrash, CrashType } from 'react-native-global-exception-handler';\n\n// Test different crash types\nsimulateNativeCrash(CrashType.array_bounds);\nsimulateNativeCrash(CrashType.memory_access);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"provide-user-actions",children:"Provide User Actions"}),"\n",(0,i.jsx)(n.p,{children:"Always give users a way forward:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'"Restart App" button (Android)'}),"\n",(0,i.jsx)(n.li,{children:'"Close App" button (iOS)'}),"\n",(0,i.jsx)(n.li,{children:"Contact support option"}),"\n",(0,i.jsx)(n.li,{children:"Clear error description"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"example-branded-error-screen",children:"Example: Branded Error Screen"}),"\n",(0,i.jsx)(n.p,{children:"Create a consistent error experience that matches your app's branding:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'// Android branded error screen\nclass BrandedErrorActivity : Activity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        \n        // Use your app\'s theme and styling\n        setTheme(R.style.AppTheme)\n        \n        val layout = LinearLayout(this).apply {\n            orientation = LinearLayout.VERTICAL\n            gravity = Gravity.CENTER\n            setPadding(48, 48, 48, 48)\n            setBackgroundColor(getColor(R.color.brandBackground))\n        }\n        \n        // Brand logo\n        ImageView(this).apply {\n            setImageResource(R.drawable.ic_app_logo)\n            layoutParams = LinearLayout.LayoutParams(200, 200)\n            layout.addView(this)\n        }\n        \n        // Error message\n        TextView(this).apply {\n            text = "Something went wrong"\n            textSize = 20f\n            setTextColor(getColor(R.color.brandPrimary))\n            setPadding(0, 32, 0, 16)\n            layout.addView(this)\n        }\n        \n        // Restart button\n        Button(this).apply {\n            text = "Restart App"\n            setOnClickListener { restartApp() }\n            layout.addView(this)\n        }\n        \n        setContentView(layout)\n    }\n    \n    private fun restartApp() {\n        val intent = packageManager.getLaunchIntentForPackage(packageName)\n        intent?.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n        startActivity(intent)\n        finish()\n    }\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(6540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);